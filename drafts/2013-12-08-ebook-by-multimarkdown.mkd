---
layout: post
title: 用MultiMarkdown写书
---
#{{ page.title }}#

# 简介 #

我一直关注着如何用文本的方式来写书，使得人们可以只关注内容，而无需关心格式，有点HTML和CSS的关系。以前对Markdown有所研究，用[Pandoc](http://johnmacfarlane.net/pandoc/)工具（基于Haskell语言）来产生Latex和基于[Pro Git](http://progit.org/)一书所用的Ruby脚本，稍嫌复杂。

今天介绍如何用MultiMarkdown （Markdown的一种扩展）来写，比较简单，步骤3个

1. 用MultiMarkdown写书，每一章一个文件，前言、序和正文、附录都应该分开命名。
2. 用`multimarkdown`工具产生Latex文件。
3. 结合Latex书的模板，用`xelatex`产生PDF。

## 步骤 1: 用MultiMarkdown写 ##

先不要拘泥于MultiMarkdown还是Markdown，我在github上的项目(企业敏捷软件开发小册子)[https://github.com/larrycai/sdcamp]

	$ ls -1 contents/
	0-preface1-preface.markdown
	0-preface2-changes.markdown
	0-preface3-acknowledge.markdown
	1-chapter1-agile-scrum.markdown
	1-chapter2-git-gerrit.markdown
	1-chapter3-ci.markdown
	1-chapter4-java.markdown
	1-chapter5-sbe.markdown
	1-chapter6-cucumber.markdown
	1-chapter7-workshop.markdown
	2-appendix1-sample.markdown
	2-appendix2-cc2git.markdown
	img
	img-source

`0-preface*` 

# 背景知识 #
## Markdown简介 ##

首先书的内容是用markdown格式写的。markdown格式的普及要归功于[Github](github.com)和[StackOverflow](http://stackoverflow.com/)。因为它们越来越流行，它们支持markdown格式也越来越流行。这里要赞一个的是，国内的[图灵社区](http://www.ituring.com.cn/)也支持markdown，用起来超级方便。

简单来说，markdown格式的文件看着像一般的文本文件，里面只是加了很少的格式标记，因此看文本文件也不影响理解，这种格式也有很多工具帮你去转化，而且很容易自动化解决。并且这些技术大多数是开源或免费的。




你可以直接看一下【Pro Git】的[“第一章 介绍” 的markdown原始文件](https://raw.github.com/progit/progit/master/zh/01-introduction/01-chapter1.markdown)，顺便看看github自动生成的简单[“第一章 介绍” 的html](https://github.com/progit/progit/blob/master/zh/01-introduction/01-chapter1.markdown)。

## 其他常用的格式 ##

计算机类图书对格式要求不是很多，图文、章节、源代码基本就够了，就算有些复杂公式，也可用图来显示。这也从理论上说明，它不需要复杂的格式。现在对这类技术书出版我的理解主要有几种：

 1. Microsoft的Word格式，虽然国内出版界如日中天，缺省就认它（对技术没追求，鄙视）。简单好学，但是不擅长自动化，是开源的死敌。
 2. Latex格式（就是Donald E. Knuth（高德纳）发明的，这是很棒的东西，特别适合学术类的各种复杂的公式等，不过学习曲线很高，国内也只有几家学术期刊使用。
 3. Docbook格式是最有名的（从SGML演化过来），ORielly和Pragmatic出版社缺省就用它，它能    很方便的转化出出版要的各种样式。如[Jenkins - the definition guide](http://www.wakaleo.com/books/jenkins-the-definitive-guide)开源书就是采用docbook。但由于是XML格式，很多人不习惯，而且多人网上协作不是很方便。
 4. 通过蒋鑫的[Got Github](http://www.worldhello.net/gotgithub/)开源书，我也了解reStructureText也是和markdown差不多纯文本（plain text)的，也是蛮流行的。


## PDF格式 ##
为了能达到出版的质量，Latex是一个常用的格式，PDF也能很容易的产生出来，有关Latex，自己看看参考链接学习吧。

[pandoc](http://johnmacfarlane.net/pandoc/)能帮着从markdown转换出latex格式，然后[TexLive](http://www.tug.org/texlive/)软件中的`xelatex`再转成PDF格式。

##试验环境##
你只需要一台Linux机器（虚拟机就可以了）和简单的Linux命令就可以试验了。有git和ruby的知识那就更方便了。

我用的试验环境是Ubuntu 11.04 (Natty)

###下载Pro Git开源书###
很简单，`git clone`一下就可以了，下载它的源文件包我觉得还是烦了点。
    
	$ git clone https://github.com/progit/progit.git
	
	
###PDF格式###
生成PDF是一个比较复杂的东西，[pandoc](http://johnmacfarlane.net/pandoc/)用Ubuntu库里的，TexLive建议下载最新的[TexLive](http://www.tug.org/texlive/)包安装，并配置到搜索路径中。
    
    $ sudo apt-get install pandoc 
	$ # 安装texlive 2011

因为是中文PDF，需要把字体嵌入在文件中，因此需要安装字体文件（如果不是Ubuntu中文版）

    $ sudo apt-get install language-support-fonts-zh-hans

现在你就可以生成pdf文件了。

    $ ./makepdfs zh	

 
如果有机会，我再介绍一下docbook和reStructureText的相关技术。 
   
## 其他 ##

本文也是我用git记录在[github](https://github.com/larrycai/larrycai.github.com)上的，你可以看到每次的变化。
    
如果对此文有兴趣，帮忙顶一下，别忘了 [@larrycaiyu](http://weibo.com/larrycaiyu)。
    
## Latex的参考 ##
 1. http://share.chinatex.org/	
 2. http://latex.yo2.cn/articles/latex-introduction0.html
 3. http://product.china-pub.com/54569